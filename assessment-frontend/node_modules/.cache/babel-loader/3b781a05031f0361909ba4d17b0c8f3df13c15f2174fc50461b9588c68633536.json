{"ast":null,"code":"var _jsxFileName = \"/home/manoj/trillisent/assessment-frontend/src/context/AssessmentContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { fetchQuestions as apiFetchQuestions, submitAssessment as apiSubmitAssessment } from '../services/api';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  return useContext(AssessmentContext);\n};\n_s(useAssessment, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({}); // { questionId: selectedOption }\n  const [questionStatus, setQuestionStatus] = useState({}); // { questionId: 'not-visited' | 'visited' | 'answered' }\n  const [timer, setTimer] = useState(60 * 60); // 60 minutes in seconds\n  const [isAssessmentStarted, setIsAssessmentStarted] = useState(false);\n  const [isAssessmentSubmitted, setIsAssessmentSubmitted] = useState(false);\n  const [submissionResult, setSubmissionResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [userId, setUserIdState] = useState(localStorage.getItem('assessmentUserId') || '');\n  const navigate = useNavigate();\n  const initializeQuestionStatus = useCallback(qs => {\n    const initialStatus = {};\n    qs.forEach(q => {\n      initialStatus[q._id] = 'not-visited';\n    });\n    setQuestionStatus(initialStatus);\n  }, []);\n  const fetchQuestions = useCallback(async () => {\n    if (!userId) {\n      navigate('/'); // Redirect to entry if no userId\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await apiFetchQuestions();\n      const fetchedQuestions = response.data;\n      if (fetchedQuestions && fetchedQuestions.length > 0) {\n        setQuestions(fetchedQuestions);\n        initializeQuestionStatus(fetchedQuestions);\n        setUserAnswers({}); // Reset answers\n        setCurrentQuestionIndex(0); // Start from first question\n        setIsAssessmentSubmitted(false);\n        setSubmissionResult(null);\n        setTimer(60 * 60); // Reset timer\n        // Mark first question as visited\n        if (fetchedQuestions.length > 0) {\n          setQuestionStatus(prev => ({\n            ...prev,\n            [fetchedQuestions[0]._id]: 'visited'\n          }));\n        }\n      } else {\n        setError(\"No questions found for the assessment.\");\n        setQuestions([]);\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch questions.');\n      console.error(\"Fetch questions error:\", err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [userId, navigate, initializeQuestionStatus]);\n  const startAssessment = id => {\n    setUserIdState(id);\n    localStorage.setItem('assessmentUserId', id);\n    setIsAssessmentStarted(true);\n    fetchQuestions(); // Fetch questions when assessment starts\n    navigate('/assessment');\n    console.log(\"ENTERED\");\n  };\n  const selectAnswer = (questionId, selectedOption) => {\n    setUserAnswers(prev => ({\n      ...prev,\n      [questionId]: selectedOption\n    }));\n    setQuestionStatus(prev => ({\n      ...prev,\n      [questionId]: 'answered'\n    }));\n  };\n  const updateQuestionStatusToVisited = questionId => {\n    setQuestionStatus(prev => {\n      if (prev[questionId] === 'not-visited') {\n        return {\n          ...prev,\n          [questionId]: 'visited'\n        };\n      }\n      return prev;\n    });\n  };\n  const nextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      const nextQuestionId = questions[currentQuestionIndex + 1]._id;\n      updateQuestionStatusToVisited(nextQuestionId);\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n  const prevQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      const prevQuestionId = questions[currentQuestionIndex - 1]._id;\n      updateQuestionStatusToVisited(prevQuestionId);\n      setCurrentQuestionIndex(prev => prev - 1);\n    }\n  };\n  const jumpToQuestion = index => {\n    if (index >= 0 && index < questions.length) {\n      const targetQuestionId = questions[index]._id;\n      updateQuestionStatusToVisited(targetQuestionId);\n      setCurrentQuestionIndex(index);\n    }\n  };\n  const submitAssessment = useCallback(async (submissionStatus = 'completed') => {\n    if (isAssessmentSubmitted) return;\n    setIsLoading(true);\n    setError(null);\n    const answersToSubmit = questions.map(q => ({\n      questionId: q._id,\n      selectedOption: userAnswers[q._id] || null // Send null if not answered\n    }));\n    try {\n      const response = await apiSubmitAssessment({\n        userId,\n        answers: answersToSubmit,\n        timeTaken: 60 * 60 - timer,\n        status: submissionStatus\n      });\n      setSubmissionResult(response.data);\n      setIsAssessmentSubmitted(true);\n      localStorage.removeItem('assessmentUserId'); // Clear user ID after submission\n      navigate('/assessment/result');\n    } catch (err) {\n      var _err$response2, _err$response2$data, _err$response3;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to submit assessment.');\n      console.error(\"Submit assessment error:\", err);\n      // If submission failed because it's already submitted, handle it\n      if (((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.status) === 403) {\n        setSubmissionResult({\n          message: err.response.data.message,\n          score: err.response.data.score\n        });\n        setIsAssessmentSubmitted(true);\n        navigate('/assessment/result');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [userId, questions, userAnswers, timer, navigate, isAssessmentSubmitted]);\n  useEffect(() => {\n    let interval;\n    if (isAssessmentStarted && !isAssessmentSubmitted && timer > 0) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n    } else if (timer === 0 && isAssessmentStarted && !isAssessmentSubmitted) {\n      submitAssessment('timed-out');\n    }\n    return () => clearInterval(interval);\n  }, [isAssessmentStarted, isAssessmentSubmitted, timer, submitAssessment]);\n  useEffect(() => {\n    // When currentQuestionIndex changes, mark the new current question as 'visited' if it was 'not-visited'\n    if (questions.length > 0 && questions[currentQuestionIndex]) {\n      const currentQId = questions[currentQuestionIndex]._id;\n      if (questionStatus[currentQId] === 'not-visited') {\n        setQuestionStatus(prev => ({\n          ...prev,\n          [currentQId]: 'visited'\n        }));\n      }\n    }\n  }, [currentQuestionIndex, questions, questionStatus]);\n  const resetAssessment = () => {\n    setQuestions([]);\n    setCurrentQuestionIndex(0);\n    setUserAnswers({});\n    setQuestionStatus({});\n    setTimer(60 * 60);\n    setIsAssessmentStarted(false);\n    setIsAssessmentSubmitted(false);\n    setSubmissionResult(null);\n    // setUserIdState(''); // Don't clear userId here, allow re-entry\n    setIsLoading(false);\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: {\n      userId,\n      questions,\n      currentQuestionIndex,\n      userAnswers,\n      questionStatus,\n      timer,\n      isAssessmentStarted,\n      isAssessmentSubmitted,\n      submissionResult,\n      isLoading,\n      error,\n      fetchQuestions,\n      startAssessment,\n      selectAnswer,\n      nextQuestion,\n      prevQuestion,\n      jumpToQuestion,\n      submitAssessment,\n      resetAssessment,\n      setCurrentQuestionIndex,\n      // for direct setting if needed\n      updateQuestionStatusToVisited\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"ZWJxU5ZXdthiQe5cqzsxUPkxpyc=\", false, function () {\n  return [useNavigate];\n});\n_c = AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","fetchQuestions","apiFetchQuestions","submitAssessment","apiSubmitAssessment","useNavigate","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","AssessmentProvider","children","_s2","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","userAnswers","setUserAnswers","questionStatus","setQuestionStatus","timer","setTimer","isAssessmentStarted","setIsAssessmentStarted","isAssessmentSubmitted","setIsAssessmentSubmitted","submissionResult","setSubmissionResult","isLoading","setIsLoading","error","setError","userId","setUserIdState","localStorage","getItem","navigate","initializeQuestionStatus","qs","initialStatus","forEach","q","_id","response","fetchedQuestions","data","length","prev","err","_err$response","_err$response$data","message","console","startAssessment","id","setItem","log","selectAnswer","questionId","selectedOption","updateQuestionStatusToVisited","nextQuestion","nextQuestionId","prevQuestion","prevQuestionId","jumpToQuestion","index","targetQuestionId","submissionStatus","answersToSubmit","map","answers","timeTaken","status","removeItem","_err$response2","_err$response2$data","_err$response3","score","interval","setInterval","prevTimer","clearInterval","currentQId","resetAssessment","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/manoj/trillisent/assessment-frontend/src/context/AssessmentContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { fetchQuestions as apiFetchQuestions, submitAssessment as apiSubmitAssessment } from '../services/api';\nimport { useNavigate } from 'react-router-dom';\n\nconst AssessmentContext = createContext();\n\nexport const useAssessment = () => useContext(AssessmentContext);\n\nexport const AssessmentProvider = ({ children }) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [userAnswers, setUserAnswers] = useState({}); // { questionId: selectedOption }\n    const [questionStatus, setQuestionStatus] = useState({}); // { questionId: 'not-visited' | 'visited' | 'answered' }\n    const [timer, setTimer] = useState(60 * 60); // 60 minutes in seconds\n    const [isAssessmentStarted, setIsAssessmentStarted] = useState(false);\n    const [isAssessmentSubmitted, setIsAssessmentSubmitted] = useState(false);\n    const [submissionResult, setSubmissionResult] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [userId, setUserIdState] = useState(localStorage.getItem('assessmentUserId') || '');\n\n    const navigate = useNavigate();\n\n    const initializeQuestionStatus = useCallback((qs) => {\n        const initialStatus = {};\n        qs.forEach(q => {\n            initialStatus[q._id] = 'not-visited';\n        });\n        setQuestionStatus(initialStatus);\n    }, []);\n\n    const fetchQuestions = useCallback(async () => {\n        if (!userId) {\n            navigate('/'); // Redirect to entry if no userId\n            return;\n        }\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await apiFetchQuestions();\n            const fetchedQuestions = response.data;\n            if (fetchedQuestions && fetchedQuestions.length > 0) {\n                setQuestions(fetchedQuestions);\n                initializeQuestionStatus(fetchedQuestions);\n                setUserAnswers({}); // Reset answers\n                setCurrentQuestionIndex(0); // Start from first question\n                setIsAssessmentSubmitted(false);\n                setSubmissionResult(null);\n                setTimer(60 * 60); // Reset timer\n                // Mark first question as visited\n                if (fetchedQuestions.length > 0) {\n                   setQuestionStatus(prev => ({...prev, [fetchedQuestions[0]._id]: 'visited'}));\n                }\n            } else {\n                setError(\"No questions found for the assessment.\");\n                setQuestions([]);\n            }\n        } catch (err) {\n            setError(err.response?.data?.message || 'Failed to fetch questions.');\n            console.error(\"Fetch questions error:\", err);\n        } finally {\n            setIsLoading(false);\n        }\n    }, [userId, navigate, initializeQuestionStatus]);\n\n\n    const startAssessment = (id) => {\n        setUserIdState(id);\n        localStorage.setItem('assessmentUserId', id);\n        setIsAssessmentStarted(true);\n        fetchQuestions(); // Fetch questions when assessment starts\n        navigate('/assessment');\n        console.log(\"ENTERED\");\n    };\n\n    const selectAnswer = (questionId, selectedOption) => {\n        setUserAnswers(prev => ({ ...prev, [questionId]: selectedOption }));\n        setQuestionStatus(prev => ({ ...prev, [questionId]: 'answered' }));\n    };\n\n    const updateQuestionStatusToVisited = (questionId) => {\n        setQuestionStatus(prev => {\n            if (prev[questionId] === 'not-visited') {\n                return { ...prev, [questionId]: 'visited' };\n            }\n            return prev;\n        });\n    };\n\n    const nextQuestion = () => {\n        if (currentQuestionIndex < questions.length - 1) {\n            const nextQuestionId = questions[currentQuestionIndex + 1]._id;\n            updateQuestionStatusToVisited(nextQuestionId);\n            setCurrentQuestionIndex(prev => prev + 1);\n        }\n    };\n\n    const prevQuestion = () => {\n        if (currentQuestionIndex > 0) {\n            const prevQuestionId = questions[currentQuestionIndex - 1]._id;\n            updateQuestionStatusToVisited(prevQuestionId);\n            setCurrentQuestionIndex(prev => prev - 1);\n        }\n    };\n\n    const jumpToQuestion = (index) => {\n        if (index >= 0 && index < questions.length) {\n            const targetQuestionId = questions[index]._id;\n            updateQuestionStatusToVisited(targetQuestionId);\n            setCurrentQuestionIndex(index);\n        }\n    };\n\n    const submitAssessment = useCallback(async (submissionStatus = 'completed') => {\n        if (isAssessmentSubmitted) return;\n        setIsLoading(true);\n        setError(null);\n        const answersToSubmit = questions.map(q => ({\n            questionId: q._id,\n            selectedOption: userAnswers[q._id] || null // Send null if not answered\n        }));\n\n        try {\n            const response = await apiSubmitAssessment({\n                userId,\n                answers: answersToSubmit,\n                timeTaken: (60 * 60) - timer,\n                status: submissionStatus\n            });\n            setSubmissionResult(response.data);\n            setIsAssessmentSubmitted(true);\n            localStorage.removeItem('assessmentUserId'); // Clear user ID after submission\n            navigate('/assessment/result');\n        } catch (err) {\n            setError(err.response?.data?.message || 'Failed to submit assessment.');\n            console.error(\"Submit assessment error:\", err);\n            // If submission failed because it's already submitted, handle it\n            if (err.response?.status === 403) {\n                setSubmissionResult({ message: err.response.data.message, score: err.response.data.score });\n                setIsAssessmentSubmitted(true);\n                navigate('/assessment/result');\n            }\n        } finally {\n            setIsLoading(false);\n        }\n    }, [userId, questions, userAnswers, timer, navigate, isAssessmentSubmitted]);\n\n\n    useEffect(() => {\n        let interval;\n        if (isAssessmentStarted && !isAssessmentSubmitted && timer > 0) {\n            interval = setInterval(() => {\n                setTimer(prevTimer => prevTimer - 1);\n            }, 1000);\n        } else if (timer === 0 && isAssessmentStarted && !isAssessmentSubmitted) {\n            submitAssessment('timed-out');\n        }\n        return () => clearInterval(interval);\n    }, [isAssessmentStarted, isAssessmentSubmitted, timer, submitAssessment]);\n\n\n    useEffect(() => {\n        // When currentQuestionIndex changes, mark the new current question as 'visited' if it was 'not-visited'\n        if (questions.length > 0 && questions[currentQuestionIndex]) {\n            const currentQId = questions[currentQuestionIndex]._id;\n            if (questionStatus[currentQId] === 'not-visited') {\n                setQuestionStatus(prev => ({ ...prev, [currentQId]: 'visited' }));\n            }\n        }\n    }, [currentQuestionIndex, questions, questionStatus]);\n\n\n    const resetAssessment = () => {\n        setQuestions([]);\n        setCurrentQuestionIndex(0);\n        setUserAnswers({});\n        setQuestionStatus({});\n        setTimer(60 * 60);\n        setIsAssessmentStarted(false);\n        setIsAssessmentSubmitted(false);\n        setSubmissionResult(null);\n        // setUserIdState(''); // Don't clear userId here, allow re-entry\n        setIsLoading(false);\n        setError(null);\n    };\n\n\n    return (\n        <AssessmentContext.Provider value={{\n            userId,\n            questions,\n            currentQuestionIndex,\n            userAnswers,\n            questionStatus,\n            timer,\n            isAssessmentStarted,\n            isAssessmentSubmitted,\n            submissionResult,\n            isLoading,\n            error,\n            fetchQuestions,\n            startAssessment,\n            selectAnswer,\n            nextQuestion,\n            prevQuestion,\n            jumpToQuestion,\n            submitAssessment,\n            resetAssessment,\n            setCurrentQuestionIndex, // for direct setting if needed\n            updateQuestionStatusToVisited\n        }}>\n            {children}\n        </AssessmentContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}