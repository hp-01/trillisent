{"ast":null,"code":"var _jsxFileName = \"/home/manoj/trillisent/frontend/src/context/AssessmentContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { fetchQuestions as apiFetchQuestions, submitAssessment as apiSubmitAssessment } from '../services/api';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  return useContext(AssessmentContext);\n};\n_s(useAssessment, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [questionStatus, setQuestionStatus] = useState({});\n  const [timer, setTimer] = useState(60 * 60);\n  const [isAssessmentStarted, setIsAssessmentStarted] = useState(false);\n  const [isAssessmentSubmitted, setIsAssessmentSubmitted] = useState(false);\n  const [submissionResult, setSubmissionResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [userId, setUserIdState] = useState(() => localStorage.getItem('assessmentUserId') || '');\n  const navigate = useNavigate();\n  const initializeQuestionStatus = useCallback(qs => {\n    // console.log(\"Context: Initializing question status for\", qs.length, \"questions\");\n    const initialStatus = {};\n    qs.forEach(q => {\n      initialStatus[q._id] = 'not-visited';\n    });\n    setQuestionStatus(initialStatus);\n  }, []);\n  const updateQuestionStatusToVisited = useCallback(questionId => {\n    // console.log(\"Context: Updating status to visited for QID:\", questionId);\n    setQuestionStatus(prevStatus => {\n      if (prevStatus[questionId] === 'not-visited') {\n        return {\n          ...prevStatus,\n          [questionId]: 'visited'\n        };\n      }\n      return prevStatus;\n    });\n  }, []);\n  const fetchQuestionsAndSetup = useCallback(async () => {\n    if (!userId) {\n      // console.log(\"Context: fetchQuestionsAndSetup - No userId, aborting.\");\n      // setError(\"User ID is missing. Cannot fetch questions.\"); // Optional: set an error\n      navigate('/'); // Should not happen if called correctly\n      return;\n    }\n    // console.log(\"Context: fetchQuestionsAndSetup - Called for userId:\", userId);\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await apiFetchQuestions();\n      // console.log(\"Context: fetchQuestionsAndSetup - API Response Status:\", response.status);\n      // console.log(\"Context: fetchQuestionsAndSetup - API Response Data:\", response.data);\n      const fetchedQuestions = response.data;\n      if (fetchedQuestions && fetchedQuestions.length > 0) {\n        var _fetchedQuestions$;\n        // console.log(\"Context: fetchQuestionsAndSetup - Questions received:\", fetchedQuestions.length);\n        setQuestions(fetchedQuestions);\n        initializeQuestionStatus(fetchedQuestions);\n        setUserAnswers({});\n        // setIsAssessmentSubmitted(false); // Should be handled by reset or start\n        // setSubmissionResult(null);\n        setTimer(60 * 60);\n        setCurrentQuestionIndex(0);\n        if ((_fetchedQuestions$ = fetchedQuestions[0]) !== null && _fetchedQuestions$ !== void 0 && _fetchedQuestions$._id) {\n          updateQuestionStatusToVisited(fetchedQuestions[0]._id);\n        }\n      } else {\n        // console.log(\"Context: fetchQuestionsAndSetup - No questions in response or empty array.\");\n        setError(\"No questions found for the assessment. Please check with the administrator.\");\n        setQuestions([]);\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      // console.error(\"Context: fetchQuestionsAndSetup - API Error:\", err);\n      // console.error(\"Context: fetchQuestionsAndSetup - Error response data:\", err.response?.data);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch questions. Please try again.');\n      setQuestions([]);\n    } finally {\n      // console.log(\"Context: fetchQuestionsAndSetup - Setting isLoading to false.\");\n      setIsLoading(false);\n    }\n  }, [userId, navigate, initializeQuestionStatus, updateQuestionStatusToVisited]);\n  const startAssessment = useCallback(id => {\n    // console.log(\"Context: startAssessment - User ID:\", id);\n    setUserIdState(id);\n    localStorage.setItem('assessmentUserId', id);\n    setIsAssessmentStarted(true);\n    setIsAssessmentSubmitted(false); // Ensure previous submission state is cleared\n    setSubmissionResult(null); // Clear previous results\n    setQuestions([]); // Clear previous questions before fetching new ones\n    setCurrentQuestionIndex(0); // Reset index\n    setUserAnswers({}); // Reset answers\n    setQuestionStatus({}); // Reset statuses\n    setError(null); // Clear previous errors\n    // fetchQuestionsAndSetup will be called by AssessmentPage's useEffect\n    navigate('/assessment');\n  }, [navigate]);\n  const selectAnswer = useCallback((questionId, selectedOption) => {\n    setUserAnswers(prev => ({\n      ...prev,\n      [questionId]: selectedOption\n    }));\n    setQuestionStatus(prevStatus => ({\n      ...prevStatus,\n      [questionId]: 'answered'\n    }));\n  }, []);\n  const nextQuestion = useCallback(() => {\n    if (currentQuestionIndex < questions.length - 1) {\n      var _questions$nextIdx;\n      const nextIdx = currentQuestionIndex + 1;\n      if ((_questions$nextIdx = questions[nextIdx]) !== null && _questions$nextIdx !== void 0 && _questions$nextIdx._id) {\n        updateQuestionStatusToVisited(questions[nextIdx]._id);\n      }\n      setCurrentQuestionIndex(nextIdx);\n    }\n  }, [currentQuestionIndex, questions, updateQuestionStatusToVisited]);\n  const prevQuestion = useCallback(() => {\n    if (currentQuestionIndex > 0) {\n      var _questions$prevIdx;\n      const prevIdx = currentQuestionIndex - 1;\n      if ((_questions$prevIdx = questions[prevIdx]) !== null && _questions$prevIdx !== void 0 && _questions$prevIdx._id) {\n        updateQuestionStatusToVisited(questions[prevIdx]._id);\n      }\n      setCurrentQuestionIndex(prevIdx);\n    }\n  }, [currentQuestionIndex, questions, updateQuestionStatusToVisited]);\n  const jumpToQuestion = useCallback(index => {\n    if (index >= 0 && index < questions.length) {\n      var _questions$index;\n      if ((_questions$index = questions[index]) !== null && _questions$index !== void 0 && _questions$index._id) {\n        updateQuestionStatusToVisited(questions[index]._id);\n      }\n      setCurrentQuestionIndex(index);\n    }\n  }, [questions, updateQuestionStatusToVisited]);\n  const submitAssessment = useCallback(async (submissionStatus = 'completed') => {\n    if (isAssessmentSubmitted) return;\n    // console.log(\"Context: submitAssessment - Submitting for userId:\", userId);\n    setIsLoading(true);\n    setError(null);\n    const answersToSubmit = questions.map(q => ({\n      questionId: q._id,\n      selectedOption: userAnswers[q._id] || null\n    }));\n    try {\n      const response = await apiSubmitAssessment({\n        userId,\n        answers: answersToSubmit,\n        timeTaken: 60 * 60 - timer,\n        status: submissionStatus\n      });\n      setSubmissionResult(response.data);\n      setIsAssessmentSubmitted(true);\n      localStorage.removeItem('assessmentUserId'); // Clear after successful submission\n      navigate('/assessment/result');\n    } catch (err) {\n      var _err$response2, _err$response2$data, _err$response3;\n      // console.error(\"Context: submitAssessment - API Error:\", err);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to submit assessment.');\n      if (((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.status) === 403) {\n        // Already submitted\n        setSubmissionResult({\n          message: err.response.data.message,\n          score: err.response.data.score,\n          totalQuestions: err.response.data.totalQuestions\n        });\n        setIsAssessmentSubmitted(true);\n        navigate('/assessment/result');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [userId, questions, userAnswers, timer, navigate, isAssessmentSubmitted]);\n  useEffect(() => {\n    let interval;\n    if (isAssessmentStarted && !isAssessmentSubmitted && timer > 0) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n    } else if (timer === 0 && isAssessmentStarted && !isAssessmentSubmitted) {\n      // console.log(\"Context: Timer expired, auto-submitting.\");\n      submitAssessment('timed-out');\n    }\n    return () => clearInterval(interval);\n  }, [isAssessmentStarted, isAssessmentSubmitted, timer, submitAssessment]);\n  const resetAssessmentContextState = useCallback(() => {\n    // Renamed for clarity\n    // console.log(\"Context: resetAssessmentContextState - Resetting context state\");\n    setQuestions([]);\n    setCurrentQuestionIndex(0);\n    setUserAnswers({});\n    setQuestionStatus({});\n    setTimer(60 * 60);\n    setIsAssessmentStarted(false);\n    setIsAssessmentSubmitted(false);\n    setSubmissionResult(null);\n    // Don't clear userId from localStorage here, StudentEntryPage handles initial load\n    // setUserIdState(''); // This might be too aggressive if user just navigates away and back\n    setIsLoading(false);\n    setError(null);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: {\n      userId,\n      questions,\n      currentQuestionIndex,\n      userAnswers,\n      questionStatus,\n      timer,\n      isAssessmentStarted,\n      isAssessmentSubmitted,\n      submissionResult,\n      isLoading,\n      error,\n      fetchQuestionsAndSetup,\n      startAssessment,\n      selectAnswer,\n      nextQuestion,\n      prevQuestion,\n      jumpToQuestion,\n      submitAssessment,\n      resetAssessmentContextState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"cs4+1PGFDnO7r97ym2C7iQJE3wQ=\", false, function () {\n  return [useNavigate];\n});\n_c = AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","fetchQuestions","apiFetchQuestions","submitAssessment","apiSubmitAssessment","useNavigate","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","AssessmentProvider","children","_s2","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","userAnswers","setUserAnswers","questionStatus","setQuestionStatus","timer","setTimer","isAssessmentStarted","setIsAssessmentStarted","isAssessmentSubmitted","setIsAssessmentSubmitted","submissionResult","setSubmissionResult","isLoading","setIsLoading","error","setError","userId","setUserIdState","localStorage","getItem","navigate","initializeQuestionStatus","qs","initialStatus","forEach","q","_id","updateQuestionStatusToVisited","questionId","prevStatus","fetchQuestionsAndSetup","response","fetchedQuestions","data","length","_fetchedQuestions$","err","_err$response","_err$response$data","message","startAssessment","id","setItem","selectAnswer","selectedOption","prev","nextQuestion","_questions$nextIdx","nextIdx","prevQuestion","_questions$prevIdx","prevIdx","jumpToQuestion","index","_questions$index","submissionStatus","answersToSubmit","map","answers","timeTaken","status","removeItem","_err$response2","_err$response2$data","_err$response3","score","totalQuestions","interval","setInterval","prevTimer","clearInterval","resetAssessmentContextState","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/manoj/trillisent/frontend/src/context/AssessmentContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { fetchQuestions as apiFetchQuestions, submitAssessment as apiSubmitAssessment } from '../services/api';\nimport { useNavigate } from 'react-router-dom';\n\nconst AssessmentContext = createContext();\n\nexport const useAssessment = () => useContext(AssessmentContext);\n\nexport const AssessmentProvider = ({ children }) => {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [userAnswers, setUserAnswers] = useState({});\n    const [questionStatus, setQuestionStatus] = useState({});\n    const [timer, setTimer] = useState(60 * 60);\n    const [isAssessmentStarted, setIsAssessmentStarted] = useState(false);\n    const [isAssessmentSubmitted, setIsAssessmentSubmitted] = useState(false);\n    const [submissionResult, setSubmissionResult] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [userId, setUserIdState] = useState(() => localStorage.getItem('assessmentUserId') || '');\n\n    const navigate = useNavigate();\n\n    const initializeQuestionStatus = useCallback((qs) => {\n        // console.log(\"Context: Initializing question status for\", qs.length, \"questions\");\n        const initialStatus = {};\n        qs.forEach(q => {\n            initialStatus[q._id] = 'not-visited';\n        });\n        setQuestionStatus(initialStatus);\n    }, []);\n\n    const updateQuestionStatusToVisited = useCallback((questionId) => {\n        // console.log(\"Context: Updating status to visited for QID:\", questionId);\n        setQuestionStatus(prevStatus => {\n            if (prevStatus[questionId] === 'not-visited') {\n                return { ...prevStatus, [questionId]: 'visited' };\n            }\n            return prevStatus;\n        });\n    }, []);\n\n    const fetchQuestionsAndSetup = useCallback(async () => {\n        if (!userId) {\n            // console.log(\"Context: fetchQuestionsAndSetup - No userId, aborting.\");\n            // setError(\"User ID is missing. Cannot fetch questions.\"); // Optional: set an error\n            navigate('/'); // Should not happen if called correctly\n            return;\n        }\n        // console.log(\"Context: fetchQuestionsAndSetup - Called for userId:\", userId);\n        setIsLoading(true);\n        setError(null);\n        try {\n            const response = await apiFetchQuestions();\n            // console.log(\"Context: fetchQuestionsAndSetup - API Response Status:\", response.status);\n            // console.log(\"Context: fetchQuestionsAndSetup - API Response Data:\", response.data);\n            const fetchedQuestions = response.data;\n\n            if (fetchedQuestions && fetchedQuestions.length > 0) {\n                // console.log(\"Context: fetchQuestionsAndSetup - Questions received:\", fetchedQuestions.length);\n                setQuestions(fetchedQuestions);\n                initializeQuestionStatus(fetchedQuestions);\n                setUserAnswers({});\n                // setIsAssessmentSubmitted(false); // Should be handled by reset or start\n                // setSubmissionResult(null);\n                setTimer(60 * 60);\n                setCurrentQuestionIndex(0);\n                if (fetchedQuestions[0]?._id) {\n                    updateQuestionStatusToVisited(fetchedQuestions[0]._id);\n                }\n            } else {\n                // console.log(\"Context: fetchQuestionsAndSetup - No questions in response or empty array.\");\n                setError(\"No questions found for the assessment. Please check with the administrator.\");\n                setQuestions([]);\n            }\n        } catch (err) {\n            // console.error(\"Context: fetchQuestionsAndSetup - API Error:\", err);\n            // console.error(\"Context: fetchQuestionsAndSetup - Error response data:\", err.response?.data);\n            setError(err.response?.data?.message || 'Failed to fetch questions. Please try again.');\n            setQuestions([]);\n        } finally {\n            // console.log(\"Context: fetchQuestionsAndSetup - Setting isLoading to false.\");\n            setIsLoading(false);\n        }\n    }, [userId, navigate, initializeQuestionStatus, updateQuestionStatusToVisited]);\n\n    const startAssessment = useCallback((id) => {\n        // console.log(\"Context: startAssessment - User ID:\", id);\n        setUserIdState(id);\n        localStorage.setItem('assessmentUserId', id);\n        setIsAssessmentStarted(true);\n        setIsAssessmentSubmitted(false); // Ensure previous submission state is cleared\n        setSubmissionResult(null);     // Clear previous results\n        setQuestions([]);               // Clear previous questions before fetching new ones\n        setCurrentQuestionIndex(0);     // Reset index\n        setUserAnswers({});             // Reset answers\n        setQuestionStatus({});          // Reset statuses\n        setError(null);                 // Clear previous errors\n        // fetchQuestionsAndSetup will be called by AssessmentPage's useEffect\n        navigate('/assessment');\n    }, [navigate]);\n\n    const selectAnswer = useCallback((questionId, selectedOption) => {\n        setUserAnswers(prev => ({ ...prev, [questionId]: selectedOption }));\n        setQuestionStatus(prevStatus => ({ ...prevStatus, [questionId]: 'answered' }));\n    }, []);\n\n    const nextQuestion = useCallback(() => {\n        if (currentQuestionIndex < questions.length - 1) {\n            const nextIdx = currentQuestionIndex + 1;\n            if (questions[nextIdx]?._id) {\n                updateQuestionStatusToVisited(questions[nextIdx]._id);\n            }\n            setCurrentQuestionIndex(nextIdx);\n        }\n    }, [currentQuestionIndex, questions, updateQuestionStatusToVisited]);\n\n    const prevQuestion = useCallback(() => {\n        if (currentQuestionIndex > 0) {\n            const prevIdx = currentQuestionIndex - 1;\n            if (questions[prevIdx]?._id) {\n                updateQuestionStatusToVisited(questions[prevIdx]._id);\n            }\n            setCurrentQuestionIndex(prevIdx);\n        }\n    }, [currentQuestionIndex, questions, updateQuestionStatusToVisited]);\n\n    const jumpToQuestion = useCallback((index) => {\n        if (index >= 0 && index < questions.length) {\n            if (questions[index]?._id) {\n                updateQuestionStatusToVisited(questions[index]._id);\n            }\n            setCurrentQuestionIndex(index);\n        }\n    }, [questions, updateQuestionStatusToVisited]);\n\n    const submitAssessment = useCallback(async (submissionStatus = 'completed') => {\n        if (isAssessmentSubmitted) return;\n        // console.log(\"Context: submitAssessment - Submitting for userId:\", userId);\n        setIsLoading(true);\n        setError(null);\n        const answersToSubmit = questions.map(q => ({\n            questionId: q._id,\n            selectedOption: userAnswers[q._id] || null\n        }));\n\n        try {\n            const response = await apiSubmitAssessment({\n                userId,\n                answers: answersToSubmit,\n                timeTaken: (60 * 60) - timer,\n                status: submissionStatus\n            });\n            setSubmissionResult(response.data);\n            setIsAssessmentSubmitted(true);\n            localStorage.removeItem('assessmentUserId'); // Clear after successful submission\n            navigate('/assessment/result');\n        } catch (err) {\n            // console.error(\"Context: submitAssessment - API Error:\", err);\n            setError(err.response?.data?.message || 'Failed to submit assessment.');\n            if (err.response?.status === 403) { // Already submitted\n                setSubmissionResult({ message: err.response.data.message, score: err.response.data.score, totalQuestions: err.response.data.totalQuestions });\n                setIsAssessmentSubmitted(true);\n                navigate('/assessment/result');\n            }\n        } finally {\n            setIsLoading(false);\n        }\n    }, [userId, questions, userAnswers, timer, navigate, isAssessmentSubmitted]);\n\n    useEffect(() => {\n        let interval;\n        if (isAssessmentStarted && !isAssessmentSubmitted && timer > 0) {\n            interval = setInterval(() => {\n                setTimer(prevTimer => prevTimer - 1);\n            }, 1000);\n        } else if (timer === 0 && isAssessmentStarted && !isAssessmentSubmitted) {\n            // console.log(\"Context: Timer expired, auto-submitting.\");\n            submitAssessment('timed-out');\n        }\n        return () => clearInterval(interval);\n    }, [isAssessmentStarted, isAssessmentSubmitted, timer, submitAssessment]);\n\n    const resetAssessmentContextState = useCallback(() => { // Renamed for clarity\n        // console.log(\"Context: resetAssessmentContextState - Resetting context state\");\n        setQuestions([]);\n        setCurrentQuestionIndex(0);\n        setUserAnswers({});\n        setQuestionStatus({});\n        setTimer(60 * 60);\n        setIsAssessmentStarted(false);\n        setIsAssessmentSubmitted(false);\n        setSubmissionResult(null);\n        // Don't clear userId from localStorage here, StudentEntryPage handles initial load\n        // setUserIdState(''); // This might be too aggressive if user just navigates away and back\n        setIsLoading(false);\n        setError(null);\n    }, []);\n\n    return (\n        <AssessmentContext.Provider value={{\n            userId,\n            questions,\n            currentQuestionIndex,\n            userAnswers,\n            questionStatus,\n            timer,\n            isAssessmentStarted,\n            isAssessmentSubmitted,\n            submissionResult,\n            isLoading,\n            error,\n            fetchQuestionsAndSetup,\n            startAssessment,\n            selectAnswer,\n            nextQuestion,\n            prevQuestion,\n            jumpToQuestion,\n            submitAssessment,\n            resetAssessmentContextState\n        }}>\n            {children}\n        </AssessmentContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}