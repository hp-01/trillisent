{"ast":null,"code":"var _jsxFileName = \"/home/manoj/trillisent/frontend/src/pages/student/StudentEntryPage.js\",\n  _s = $RefreshSig$();\n// src/pages/student/StudentEntryPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { useAssessment } from '../../context/AssessmentContext';\nimport { checkUserSubmissionStatus } from '../../services/api'; // Import the new API service\nimport './StudentEntryPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StudentEntryPage() {\n  _s();\n  const [tempUserId, setTempUserId] = useState('');\n  const [isCheckingStatus, setIsCheckingStatus] = useState(false);\n  const [entryError, setEntryError] = useState(''); // For errors on this page\n\n  const {\n    startAssessment,\n    userId: contextUserId,\n    // The ID currently active in the context (if any)\n    isAssessmentStarted,\n    // Is an assessment flow (questions, timer) active in context?\n    isAssessmentSubmitted,\n    // Was the *context's* assessment flow submitted?\n    resetAssessmentContextState\n    // hasSubmittedBefore from context is less relevant here, as we're doing a fresh API check\n  } = useAssessment();\n  const navigate = useNavigate();\n  useEffect(() => {\n    // This useEffect is for handling page reloads or navigating back to entry page\n    // console.log(\"StudentEntryPage useEffect (initial load/nav back):\", { contextUserId, isAssessmentStarted, isAssessmentSubmitted });\n\n    if (isAssessmentStarted && contextUserId && !isAssessmentSubmitted) {\n      // If an assessment is active in context (e.g., user refreshed /assessment then navigated back here)\n      // and it wasn't submitted, let them continue.\n      // console.log(\"StudentEntryPage: Active (but not submitted) assessment found, redirecting to /assessment\");\n      navigate('/assessment');\n    } else {\n      // If no active assessment in context, or if previous context assessment WAS submitted,\n      // ensure a clean slate for new entry.\n      // console.log(\"StudentEntryPage: No active assessment or previous was submitted. Resetting context.\");\n      resetAssessmentContextState();\n      localStorage.removeItem('assessmentUserId'); // Clear any stale ID from previous session\n    }\n    // Clear any local entry error when component mounts or relevant context state changes\n    setEntryError('');\n  }, [isAssessmentStarted, isAssessmentSubmitted, contextUserId, navigate, resetAssessmentContextState]);\n  const handleStartAttempt = async () => {\n    const trimmedUserId = tempUserId.trim();\n    if (!trimmedUserId) {\n      setEntryError(\"Please enter your Name or ID.\");\n      return;\n    }\n    setIsCheckingStatus(true);\n    setEntryError(''); // Clear previous errors\n\n    try {\n      // console.log(\"StudentEntryPage: Checking submission status for:\", trimmedUserId);\n      const response = await checkUserSubmissionStatus(trimmedUserId);\n      // console.log(\"StudentEntryPage: Status check response:\", response.data);\n\n      if (response.data.hasSubmitted) {\n        setEntryError(response.data.message || `The ID \"${trimmedUserId}\" has already completed this assessment.`);\n        setIsCheckingStatus(false);\n      } else {\n        // User has NOT submitted, proceed to start the assessment in the context\n        // console.log(\"StudentEntryPage: User has not submitted. Calling startAssessment.\");\n        // startAssessment will reset relevant context states for a fresh start\n        startAssessment(trimmedUserId);\n        // Navigation to /assessment is handled by startAssessment\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      // console.error(\"StudentEntryPage: Error checking submission status:\", error);\n      setEntryError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Could not verify submission status. Please try again.\");\n      setIsCheckingStatus(false);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleStartAttempt();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student-entry-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome to the Assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please enter your Name or Student ID to begin.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), entryError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message-reattempt\",\n      children: entryError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"student-entry-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: tempUserId,\n        onChange: e => {\n          setTempUserId(e.target.value);\n          if (entryError) setEntryError(''); // Clear error when user types\n        },\n        placeholder: \"Enter Your Name/ID\",\n        required: true,\n        disabled: isCheckingStatus,\n        className: \"student-entry-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isCheckingStatus,\n        className: \"student-entry-button\",\n        children: isCheckingStatus ? 'Checking...' : 'Start Assessment'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin\",\n      className: \"btn btn-secondary\",\n      style: {\n        marginTop: '20px'\n      },\n      children: \"Admin Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n_s(StudentEntryPage, \"uTjpteNMsqS33LpHQR0cRIByPK0=\", false, function () {\n  return [useAssessment, useNavigate];\n});\n_c = StudentEntryPage;\nexport default StudentEntryPage;\nvar _c;\n$RefreshReg$(_c, \"StudentEntryPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Link","useAssessment","checkUserSubmissionStatus","jsxDEV","_jsxDEV","StudentEntryPage","_s","tempUserId","setTempUserId","isCheckingStatus","setIsCheckingStatus","entryError","setEntryError","startAssessment","userId","contextUserId","isAssessmentStarted","isAssessmentSubmitted","resetAssessmentContextState","navigate","localStorage","removeItem","handleStartAttempt","trimmedUserId","trim","response","data","hasSubmitted","message","error","_error$response","_error$response$data","handleSubmit","e","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","disabled","to","style","marginTop","_c","$RefreshReg$"],"sources":["/home/manoj/trillisent/frontend/src/pages/student/StudentEntryPage.js"],"sourcesContent":["// src/pages/student/StudentEntryPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { useAssessment } from '../../context/AssessmentContext';\nimport { checkUserSubmissionStatus } from '../../services/api'; // Import the new API service\nimport './StudentEntryPage.css';\n\nfunction StudentEntryPage() {\n    const [tempUserId, setTempUserId] = useState('');\n    const [isCheckingStatus, setIsCheckingStatus] = useState(false);\n    const [entryError, setEntryError] = useState(''); // For errors on this page\n\n    const {\n        startAssessment,\n        userId: contextUserId, // The ID currently active in the context (if any)\n        isAssessmentStarted,   // Is an assessment flow (questions, timer) active in context?\n        isAssessmentSubmitted, // Was the *context's* assessment flow submitted?\n        resetAssessmentContextState,\n        // hasSubmittedBefore from context is less relevant here, as we're doing a fresh API check\n    } = useAssessment();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // This useEffect is for handling page reloads or navigating back to entry page\n        // console.log(\"StudentEntryPage useEffect (initial load/nav back):\", { contextUserId, isAssessmentStarted, isAssessmentSubmitted });\n\n        if (isAssessmentStarted && contextUserId && !isAssessmentSubmitted) {\n            // If an assessment is active in context (e.g., user refreshed /assessment then navigated back here)\n            // and it wasn't submitted, let them continue.\n            // console.log(\"StudentEntryPage: Active (but not submitted) assessment found, redirecting to /assessment\");\n            navigate('/assessment');\n        } else {\n            // If no active assessment in context, or if previous context assessment WAS submitted,\n            // ensure a clean slate for new entry.\n            // console.log(\"StudentEntryPage: No active assessment or previous was submitted. Resetting context.\");\n            resetAssessmentContextState();\n            localStorage.removeItem('assessmentUserId'); // Clear any stale ID from previous session\n        }\n        // Clear any local entry error when component mounts or relevant context state changes\n        setEntryError('');\n    }, [isAssessmentStarted, isAssessmentSubmitted, contextUserId, navigate, resetAssessmentContextState]);\n\n\n    const handleStartAttempt = async () => {\n        const trimmedUserId = tempUserId.trim();\n        if (!trimmedUserId) {\n            setEntryError(\"Please enter your Name or ID.\");\n            return;\n        }\n\n        setIsCheckingStatus(true);\n        setEntryError(''); // Clear previous errors\n\n        try {\n            // console.log(\"StudentEntryPage: Checking submission status for:\", trimmedUserId);\n            const response = await checkUserSubmissionStatus(trimmedUserId);\n            // console.log(\"StudentEntryPage: Status check response:\", response.data);\n\n            if (response.data.hasSubmitted) {\n                setEntryError(response.data.message || `The ID \"${trimmedUserId}\" has already completed this assessment.`);\n                setIsCheckingStatus(false);\n            } else {\n                // User has NOT submitted, proceed to start the assessment in the context\n                // console.log(\"StudentEntryPage: User has not submitted. Calling startAssessment.\");\n                // startAssessment will reset relevant context states for a fresh start\n                startAssessment(trimmedUserId);\n                // Navigation to /assessment is handled by startAssessment\n            }\n        } catch (error) {\n            // console.error(\"StudentEntryPage: Error checking submission status:\", error);\n            setEntryError(error.response?.data?.message || \"Could not verify submission status. Please try again.\");\n            setIsCheckingStatus(false);\n        }\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        handleStartAttempt();\n    };\n\n    return (\n        <div className=\"student-entry-container\">\n            <h2>Welcome to the Assessment</h2>\n            <p>Please enter your Name or Student ID to begin.</p>\n\n            {entryError && (\n                <p className=\"error-message-reattempt\">{entryError}</p>\n            )}\n\n            <form onSubmit={handleSubmit} className=\"student-entry-form\">\n                <input\n                    type=\"text\"\n                    value={tempUserId}\n                    onChange={(e) => {\n                        setTempUserId(e.target.value);\n                        if (entryError) setEntryError(''); // Clear error when user types\n                    }}\n                    placeholder=\"Enter Your Name/ID\"\n                    required\n                    disabled={isCheckingStatus}\n                    className=\"student-entry-input\"\n                />\n                <button\n                    type=\"submit\"\n                    disabled={isCheckingStatus}\n                    className=\"student-entry-button\"\n                >\n                    {isCheckingStatus ? 'Checking...' : 'Start Assessment'}\n                </button>\n            </form>\n            <Link to=\"/admin\" className=\"btn btn-secondary\" style={{marginTop: '20px'}}>Admin Panel</Link>\n        </div>\n    );\n}\n\nexport default StudentEntryPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}