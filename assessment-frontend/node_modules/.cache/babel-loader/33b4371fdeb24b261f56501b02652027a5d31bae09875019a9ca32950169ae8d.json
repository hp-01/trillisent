{"ast":null,"code":"var _jsxFileName = \"/home/manoj/trillisent/assessment-frontend/src/pages/student/StudentEntryPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAssessment } from '../../context/AssessmentContext';\nimport './StudentEntryPage.css';\nfunction StudentEntryPage() {\n  _s();\n  const [tempUserId, setTempUserId] = useState('');\n  const {\n    startAssessment,\n    userId: contextUserId,\n    isAssessmentStarted,\n    resetAssessmentContextState\n  } = useAssessment();\n  const navigate = useNavigate();\n  useEffect(() => {\n    // console.log(\"StudentEntryPage useEffect:\", { contextUserId, isAssessmentStarted });\n    // If an assessment was already started (e.g., browser refresh on /assessment)\n    // and we have a userId from localStorage (which context initializes with),\n    // redirect to assessment.\n    // This also handles the case where user reloads on entry page but has a started assessment.\n    if (isAssessmentStarted && contextUserId) {\n      // console.log(\"StudentEntryPage: Active assessment found, redirecting to /assessment\");\n      navigate('/assessment');\n    } else {\n      // Otherwise, ensure any lingering assessment state is cleared.\n      // This is important if user navigates back to entry page after starting.\n      // console.log(\"StudentEntryPage: No active assessment or userId, resetting context state.\");\n      resetAssessmentContextState();\n    }\n  }, [contextUserId, isAssessmentStarted, navigate, resetAssessmentContextState]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (tempUserId.trim()) {\n      // console.log(\"StudentEntryPage: handleSubmit - Starting assessment for:\", tempUserId.trim());\n      startAssessment(tempUserId.trim());\n    } else {\n      alert(\"Please enter your Name or ID.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student-entry-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome to the Assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please enter your Name or Student ID to begin.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"student-entry-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: tempUserId,\n        onChange: e => setTempUserId(e.target.value),\n        placeholder: \"Enter Your Name/ID\",\n        required: true,\n        className: \"student-entry-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"student-entry-button\",\n        children: \"Start Assessment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin\",\n      className: \"btn btn-secondary\",\n      style: {\n        marginTop: '20px'\n      },\n      children: \"Admin Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n// Need to import Link for the Admin Panel button\n_s(StudentEntryPage, \"YU2h9AU9d9TZSvwInVI+XT1c/QA=\", false, function () {\n  return [useAssessment, useNavigate];\n});\n_c = StudentEntryPage;\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default StudentEntryPage;\nvar _c;\n$RefreshReg$(_c, \"StudentEntryPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useAssessment","StudentEntryPage","_s","tempUserId","setTempUserId","startAssessment","userId","contextUserId","isAssessmentStarted","resetAssessmentContextState","navigate","handleSubmit","e","preventDefault","trim","alert","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","Link","to","style","marginTop","_c","jsxDEV","$RefreshReg$"],"sources":["/home/manoj/trillisent/assessment-frontend/src/pages/student/StudentEntryPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAssessment } from '../../context/AssessmentContext';\nimport './StudentEntryPage.css';\n\nfunction StudentEntryPage() {\n    const [tempUserId, setTempUserId] = useState('');\n    const { startAssessment, userId: contextUserId, isAssessmentStarted, resetAssessmentContextState } = useAssessment();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // console.log(\"StudentEntryPage useEffect:\", { contextUserId, isAssessmentStarted });\n        // If an assessment was already started (e.g., browser refresh on /assessment)\n        // and we have a userId from localStorage (which context initializes with),\n        // redirect to assessment.\n        // This also handles the case where user reloads on entry page but has a started assessment.\n        if (isAssessmentStarted && contextUserId) {\n            // console.log(\"StudentEntryPage: Active assessment found, redirecting to /assessment\");\n            navigate('/assessment');\n        } else {\n            // Otherwise, ensure any lingering assessment state is cleared.\n            // This is important if user navigates back to entry page after starting.\n            // console.log(\"StudentEntryPage: No active assessment or userId, resetting context state.\");\n            resetAssessmentContextState();\n        }\n    }, [contextUserId, isAssessmentStarted, navigate, resetAssessmentContextState]);\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (tempUserId.trim()) {\n            // console.log(\"StudentEntryPage: handleSubmit - Starting assessment for:\", tempUserId.trim());\n            startAssessment(tempUserId.trim());\n        } else {\n            alert(\"Please enter your Name or ID.\");\n        }\n    };\n\n    return (\n        <div className=\"student-entry-container\">\n            <h2>Welcome to the Assessment</h2>\n            <p>Please enter your Name or Student ID to begin.</p>\n            <form onSubmit={handleSubmit} className=\"student-entry-form\">\n                <input\n                    type=\"text\"\n                    value={tempUserId}\n                    onChange={(e) => setTempUserId(e.target.value)}\n                    placeholder=\"Enter Your Name/ID\"\n                    required\n                    className=\"student-entry-input\"\n                />\n                <button type=\"submit\" className=\"student-entry-button\">\n                    Start Assessment\n                </button>\n            </form>\n            <Link to=\"/admin\" className=\"btn btn-secondary\" style={{marginTop: '20px'}}>Admin Panel</Link>\n        </div>\n    );\n}\n// Need to import Link for the Admin Panel button\nimport { Link } from 'react-router-dom';\nexport default StudentEntryPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}