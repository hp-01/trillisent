{"ast":null,"code":"var _jsxFileName = \"/home/manoj/trillisent/frontend/src/pages/student/AssessmentPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useAssessment } from '../../context/AssessmentContext';\nimport QuestionDisplay from '../../components/assessment/QuestionDisplay';\nimport NavigationButtons from '../../components/assessment/NavigationButtons';\nimport QuestionNavigator from '../../components/assessment/QuestionNavigator';\nimport Timer from '../../components/assessment/Timer';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport ErrorMessage from '../../components/common/ErrorMessage';\nimport './AssessmentPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AssessmentPage() {\n  _s();\n  const {\n    questions,\n    currentQuestionIndex,\n    userAnswers,\n    questionStatus,\n    timer,\n    isLoading,\n    error,\n    fetchQuestionsAndSetup,\n    // Use the renamed function\n    isAssessmentStarted,\n    userId,\n    // Get userId to ensure it's set before fetching\n    selectAnswer,\n    nextQuestion,\n    prevQuestion,\n    jumpToQuestion,\n    submitAssessment,\n    isAssessmentSubmitted\n  } = useAssessment();\n  useEffect(() => {\n    // console.log(\"AssessmentPage useEffect Triggered:\", { isAssessmentStarted, userId, questionsLength: questions.length, isLoading, error });\n    // Only fetch if assessment has started, userId is present, questions are not yet loaded,\n    // and not currently loading or in an error state (to prevent multiple calls).\n    if (isAssessmentStarted && userId && questions.length === 0 && !isLoading && !error) {\n      // console.log(\"AssessmentPage: Conditions met, calling fetchQuestionsAndSetup()\");\n      fetchQuestionsAndSetup();\n    }\n  }, [isAssessmentStarted, userId, questions.length, isLoading, error, fetchQuestionsAndSetup]);\n  if (isLoading && questions.length === 0) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n    message: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 53\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    message: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 23\n  }, this); // Display specific error from context\n\n  // These checks should ideally be handled by ProtectedAssessmentRoute, but as a safeguard:\n  if (!isAssessmentStarted || !userId) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Assessment not properly started. Please return to the home page.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 49\n  }, this);\n  if (isAssessmentSubmitted) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Assessment already submitted. Please check your results or start a new assessment.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 39\n  }, this);\n\n  // This is the target message if questions array is empty AFTER loading attempt and no error string was set.\n  if (!isLoading && !error && questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: \"No questions are currently available for this assessment. Please contact support.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  if (!currentQuestion) {\n    // This state can happen briefly if questions are being loaded or if something went wrong\n    // console.warn(\"AssessmentPage: currentQuestion is undefined. Curent state:\", { currentQuestionIndex, questionsLength: questions.length, isLoading, error });\n    if (isLoading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      message: \"Preparing question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 31\n    }, this); // More specific loading\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: \"Could not load the current question. Please try refreshing or navigating.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"assessment-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"assessment-main-content\",\n      children: [/*#__PURE__*/_jsxDEV(QuestionDisplay, {\n        question: currentQuestion,\n        selectedOption: userAnswers[currentQuestion._id],\n        onSelectOption: option => selectAnswer(currentQuestion._id, option)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NavigationButtons, {\n        onPrev: prevQuestion,\n        onNext: nextQuestion,\n        onSubmit: () => submitAssessment('completed'),\n        isFirst: currentQuestionIndex === 0,\n        isLast: currentQuestionIndex === questions.length - 1,\n        totalQuestions: questions.length,\n        currentQuestionNumber: currentQuestionIndex + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"assessment-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        initialTime: timer,\n        onTimeout: () => submitAssessment('timed-out'),\n        isSubmitted: isAssessmentSubmitted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(QuestionNavigator, {\n        questions: questions,\n        currentQuestionIndex: currentQuestionIndex,\n        questionStatus: questionStatus,\n        onJumpToQuestion: jumpToQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => submitAssessment('completed'),\n        className: \"submit-button-sidebar\",\n        disabled: isLoading || isAssessmentSubmitted,\n        children: isLoading && isAssessmentSubmitted === false ? 'Submitting...' : 'Submit Test'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(AssessmentPage, \"x7xHL0tAmvfHa6lrW1fokQjx3lE=\", false, function () {\n  return [useAssessment];\n});\n_c = AssessmentPage;\nexport default AssessmentPage;\nvar _c;\n$RefreshReg$(_c, \"AssessmentPage\");","map":{"version":3,"names":["React","useEffect","useAssessment","QuestionDisplay","NavigationButtons","QuestionNavigator","Timer","LoadingSpinner","ErrorMessage","jsxDEV","_jsxDEV","AssessmentPage","_s","questions","currentQuestionIndex","userAnswers","questionStatus","timer","isLoading","error","fetchQuestionsAndSetup","isAssessmentStarted","userId","selectAnswer","nextQuestion","prevQuestion","jumpToQuestion","submitAssessment","isAssessmentSubmitted","length","message","fileName","_jsxFileName","lineNumber","columnNumber","children","currentQuestion","className","question","selectedOption","_id","onSelectOption","option","onPrev","onNext","onSubmit","isFirst","isLast","totalQuestions","currentQuestionNumber","initialTime","onTimeout","isSubmitted","onJumpToQuestion","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/manoj/trillisent/frontend/src/pages/student/AssessmentPage.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useAssessment } from '../../context/AssessmentContext';\nimport QuestionDisplay from '../../components/assessment/QuestionDisplay';\nimport NavigationButtons from '../../components/assessment/NavigationButtons';\nimport QuestionNavigator from '../../components/assessment/QuestionNavigator';\nimport Timer from '../../components/assessment/Timer';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport ErrorMessage from '../../components/common/ErrorMessage';\nimport './AssessmentPage.css';\n\nfunction AssessmentPage() {\n    const {\n        questions,\n        currentQuestionIndex,\n        userAnswers,\n        questionStatus,\n        timer,\n        isLoading,\n        error,\n        fetchQuestionsAndSetup, // Use the renamed function\n        isAssessmentStarted,\n        userId, // Get userId to ensure it's set before fetching\n        selectAnswer,\n        nextQuestion,\n        prevQuestion,\n        jumpToQuestion,\n        submitAssessment,\n        isAssessmentSubmitted,\n    } = useAssessment();\n\n    useEffect(() => {\n        // console.log(\"AssessmentPage useEffect Triggered:\", { isAssessmentStarted, userId, questionsLength: questions.length, isLoading, error });\n        // Only fetch if assessment has started, userId is present, questions are not yet loaded,\n        // and not currently loading or in an error state (to prevent multiple calls).\n        if (isAssessmentStarted && userId && questions.length === 0 && !isLoading && !error) {\n            // console.log(\"AssessmentPage: Conditions met, calling fetchQuestionsAndSetup()\");\n            fetchQuestionsAndSetup();\n        }\n    }, [isAssessmentStarted, userId, questions.length, isLoading, error, fetchQuestionsAndSetup]);\n\n\n    if (isLoading && questions.length === 0) return <LoadingSpinner message=\"Loading questions...\" />;\n    if (error) return <ErrorMessage message={error} />; // Display specific error from context\n\n    // These checks should ideally be handled by ProtectedAssessmentRoute, but as a safeguard:\n    if (!isAssessmentStarted || !userId) return <p>Assessment not properly started. Please return to the home page.</p>;\n    if (isAssessmentSubmitted) return <p>Assessment already submitted. Please check your results or start a new assessment.</p>;\n\n    // This is the target message if questions array is empty AFTER loading attempt and no error string was set.\n    if (!isLoading && !error && questions.length === 0) {\n        return <ErrorMessage message=\"No questions are currently available for this assessment. Please contact support.\" />;\n    }\n\n    const currentQuestion = questions[currentQuestionIndex];\n\n    if (!currentQuestion) {\n        // This state can happen briefly if questions are being loaded or if something went wrong\n        // console.warn(\"AssessmentPage: currentQuestion is undefined. Curent state:\", { currentQuestionIndex, questionsLength: questions.length, isLoading, error });\n        if (isLoading) return <LoadingSpinner message=\"Preparing question...\" />; // More specific loading\n        return <ErrorMessage message=\"Could not load the current question. Please try refreshing or navigating.\" />;\n    }\n\n    return (\n        <div className=\"assessment-page-container\">\n            <div className=\"assessment-main-content\">\n                <QuestionDisplay\n                    question={currentQuestion}\n                    selectedOption={userAnswers[currentQuestion._id]}\n                    onSelectOption={(option) => selectAnswer(currentQuestion._id, option)}\n                />\n                <NavigationButtons\n                    onPrev={prevQuestion}\n                    onNext={nextQuestion}\n                    onSubmit={() => submitAssessment('completed')}\n                    isFirst={currentQuestionIndex === 0}\n                    isLast={currentQuestionIndex === questions.length - 1}\n                    totalQuestions={questions.length}\n                    currentQuestionNumber={currentQuestionIndex + 1}\n                />\n            </div>\n            <aside className=\"assessment-sidebar\">\n                <Timer initialTime={timer} onTimeout={() => submitAssessment('timed-out')} isSubmitted={isAssessmentSubmitted} />\n                <QuestionNavigator\n                    questions={questions}\n                    currentQuestionIndex={currentQuestionIndex}\n                    questionStatus={questionStatus}\n                    onJumpToQuestion={jumpToQuestion}\n                />\n                <button\n                    onClick={() => submitAssessment('completed')}\n                    className=\"submit-button-sidebar\"\n                    disabled={isLoading || isAssessmentSubmitted}\n                >\n                    {isLoading && isAssessmentSubmitted === false ? 'Submitting...' : 'Submit Test'}\n                </button>\n            </aside>\n        </div>\n    );\n}\n\nexport default AssessmentPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}